openapi: 3.1.0
info:
  title: Betty Memory Graph API
  version: 1.0.0
  description: |
    Interface to Betty's Memory Graph API for executing data operations and queries.
    Uses tenant configuration for database routing and authentication.

servers:
  - url: https://openai.alfrd.app
    description: Dev server (with tenant routing)

paths:
  /api/v1/query:
    post:
      operationId: executeQuery
      summary: Execute SQL query
      description: |
        Execute SQL queries with optional parameter binding and result limiting.
        Authentication via X-API-Key header determines tenant and database routing.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
            examples:
              simpleSelect:
                summary: Simple SELECT query
                value:
                  language: "sql"
                  command: "SELECT FROM Person WHERE name = :name"
                  params:
                    name: "John"
                  limit: 10
              complexQuery:
                summary: Complex query with multiple parameters
                value:
                  language: "sql"
                  command: "SELECT FROM Person WHERE age > :minAge AND city = :city"
                  params:
                    minAge: 25
                    city: "New York"
                  limit: 20
      responses:
        '200':
          description: Query results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResponse'
        '400':
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error

  /api/v1/command/schema/query:
    post:
      operationId: executeSchemaQuery
      summary: Execute schema queries
      description: |
        Execute schema queries to retrieve schema information.
        Example: POST with query in body {"query": "SELECT FROM schema:types"}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - query
              properties:
                query:
                  type: string
                  description: The schema query to execute (e.g., SELECT FROM schema:types, schema:indexes, or schema:database)
            examples:
              infoSchema:
                summary: Get schema information
                value:
                  query: "SELECT FROM schema:types"
              infoProperties:
                summary: Get property information
                value:
                  query: "SELECT FROM schema:database"
              infoIndexes:
                summary: Get index information  
                value:
                  query: "SELECT FROM schema:indexes"
      responses:
        '200':
          description: Query results as raw data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaQueryResponse'
        '400':
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error

  /api/v1/command/data:
    post:
      operationId: executeDataOperation
      summary: Execute graph operations
      description: |
        Create, update, or delete vertices and edges.
        IMPORTANT: Send operation fields directly in request body, not wrapped in a "params" object.
        Example: POST with vertex/edge operation in body.
      x-openai-isConsequential: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataRequest'
            examples:
              createVertexWithProperties:
                summary: Create vertex with embedded attributes using properties
                description: Send operation fields directly in request body
                value:
                  operation: "vertex"
                  action: "create"
                  class: "Person"
                  properties:
                    name: "John"
                    attributes:
                      email: "john@example.com"
                      phone: "+1234567890"
              createVertexWithPaths:
                summary: Create vertex with embedded attributes using path_properties
                description: |
                  Send operation fields directly in request body.
                  path_properties provide an alternative way to set nested attributes.
                value:
                  operation: "vertex"
                  action: "create"
                  class: "Person"
                  properties:
                    name: "John"
                  path_properties: [
                    {
                      "path": "attributes.email",
                      "value": "john@example.com"
                    },
                    {
                      "path": "attributes.phone",
                      "value": "+1234567890"
                    }
                  ]
              updateEmbeddedAttribute:
                summary: Update specific embedded attribute
                description: |
                  Send operation fields directly in request body.
                  Do NOT wrap in a "params" object.
                value:
                  operation: "vertex"
                  action: "update"
                  class: "#12:0"
                  path_properties: [
                    {
                      "path": "attributes.email",
                      "value": "new@email.com"
                    }
                  ]
              multiplePathUpdates:
                summary: Multiple path updates in one request
                description: |
                  Send operation fields directly in request body.
                  Do NOT wrap in a "params" object.
                value:
                  operation: "vertex"
                  action: "update"
                  class: "#12:0"
                  path_properties: [
                    {
                      "path": "attributes.email",
                      "value": "new@email.com"
                    },
                    {
                      "path": "attributes.phone",
                      "value": "+9876543210"
                    }
                  ]
              createEdge:
                summary: Create an edge with properties
                description: Create a relationship between two vertices with specified properties
                x-openai-isConsequential: true
                value:
                  operation: "edge"
                  action: "create"
                  class: "PARTICIPATED_IN"
                  from_rid: "#123:456"
                  to_rid: "#123:789"
                  properties:
                    role: "Contact"
                    participation_type: "Suggested"
                  schema:
                    type: object
                    properties:
                      role:
                        type: string
                        description: The role of the participant in the event
                      participation_type:
                        type: string
                        description: Type of participation (e.g. Suggested, Mentioned)
                    required:
                      - role
                      - participation_type
      responses:
        '200':
          description: Operation result as raw data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataResponse'
        '400':
          description: Invalid operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error

components:
  schemas:
    QueryRequest:
      type: object
      required:
        - language
        - command
      properties:
        language:
          type: string
          enum: [sql]
          description: Query language (currently only SQL supported)
        command:
          type: string
          description: The query to execute
        params:
          type: object
          description: Named parameters for query binding
          additionalProperties: true
        limit:
          type: integer
          minimum: 1
          maximum: 1000
          default: 100
          description: Maximum number of results to return

    QueryResponse:
      type: object
      properties:
        result:
          type: array
          items:
            type: object
            additionalProperties: true
          description: Query results
        count:
          type: integer
          description: Number of results returned
        truncated:
          type: boolean
          description: Whether results were limited by the limit parameter
        execution_time:
          type: number
          description: Query execution time in milliseconds

    SchemaQueryRequest:
      type: object
      required:
        - query
      properties:
        query:
          type: string
          description: SQL query for schema operations

    SchemaQueryResponse:
      type: object
      properties:
        classes:
          type: array
          items:
            $ref: '#/components/schemas/SchemaClass'
          description: Schema class definitions
        indexes:
          type: array
          items:
            $ref: '#/components/schemas/SchemaIndex'
          description: Schema indexes

    DataRequest:
      type: object
      required:
        - operation
        - action
        - class
      properties:
        operation:
          type: string
          enum: [vertex, edge]
          description: Type of graph operation
        action:
          type: string
          enum: [create, update, delete]
          description: Operation to perform
        class:
          type: string
          description: Graph class name
        properties:
          type: object
          description: Element properties
          additionalProperties: true
        path_properties:
          type: array
          description: Path-based property updates
          items:
            type: object
            required:
              - path
              - value
            properties:
              path:
                type: string
                description: Property path using dot notation (e.g. attributes.email)
              value:
                description: Value to set at the path
        from_rid:
          type: string
          description: Source vertex RID for edges
        to_rid:
          type: string
          description: Target vertex RID for edges

    DataResponse:
      type: object
      required:
        - rid
        - class
        - properties
      properties:
        rid:
          type: string
          description: Record ID
        class:
          type: string
          description: Graph class name
        properties:
          type: object
          description: Element properties

    SchemaClass:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
        abstract:
          type: boolean
        properties:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              type:
                type: string
              mandatory:
                type: boolean
              readonly:
                type: boolean
              notNull:
                type: boolean
              default:
                type: string
        superClass:
          type: string

    SchemaIndex:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
        properties:
          type: array
          items:
            type: string

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error type
        detail:
          type: string
          description: Error details
